<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BackendTest.API</name>
    </assembly>
    <members>
        <member name="M:BackendTest.API.Controllers.ProductController.GetProduct(System.Guid)">
            <summary>
            Get a Product
            </summary>
            <param></param>
            <returns>IActionResult</returns>
            <response code="200">If the product is found</response>
        </member>
        <member name="M:BackendTest.API.Controllers.ProductController.PostProduct(BackendTest.API.Models.ProductModel)">
            <summary>
            Add a Product
            </summary>
            <param></param>
            <returns>IActionResult</returns>
            <response code="200">If and product is added</response>
        </member>
        <member name="M:BackendTest.API.Controllers.ProductController.UpdateProduct(BackendTest.API.Models.ProductModel)">
            <summary>
            Update a Product
            </summary>
            <param></param>
            <returns>IActionResult</returns>
            <response code="204">If and product is found</response>
        </member>
        <member name="M:BackendTest.API.Controllers.ProductController.DeleteProduct(System.Guid)">
            <summary>
            Delete a Product
            </summary>
            <param></param>
            <returns>IActionResult</returns>
            <response code="204">If and product is deleted</response>
        </member>
        <member name="M:BackendTest.API.Controllers.UserController.GetUser(System.Guid)">
            <summary>
            Get a User
            </summary>
            <param></param>
            <returns>IActionResult</returns>
            <response code="200">If the user is found</response>
        </member>
        <member name="M:BackendTest.API.Controllers.UserController.PostUser(BackendTest.API.Models.UserModel)">
            <summary>
            Add a User
            </summary>
            <param></param>
            <returns>IActionResult</returns>
            <response code="200">If and user is added</response>
        </member>
        <member name="M:BackendTest.API.Controllers.UserController.UpdateUser(BackendTest.API.Models.UserModel)">
            <summary>
            Update a User
            </summary>
            <param></param>
            <returns>IActionResult</returns>
            <response code="204">If and User is updated</response>
        </member>
        <member name="M:BackendTest.API.Controllers.UserController.DeleteProduct(System.Guid)">
            <summary>
            Delete a User
            </summary>
            <param></param>
            <returns>IActionResult</returns>
            <response code="204">If and user is deleted</response>
        </member>
        <member name="M:BackendTest.API.Domain.Entities.User.EmailRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a word character greedily at least once.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 1st capture group.<br/>
                    ○ Match a character in the set ['+-.].<br/>
                    ○ Match a word character atomically at least once.<br/>
            ○ Match '@'.<br/>
            ○ Match a word character greedily at least once.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 2nd capture group.<br/>
                    ○ Match a character in the set [-.].<br/>
                    ○ Match a word character atomically at least once.<br/>
            ○ Match '.'.<br/>
            ○ Match a word character greedily at least once.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 3rd capture group.<br/>
                    ○ Match a character in the set [-.].<br/>
                    ○ Match a word character atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:BackendTest.API.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:BackendTest.API.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendTest.API.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendTest.API.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:BackendTest.API.Migrations.NewDatabase">
            <inheritdoc />
        </member>
        <member name="M:BackendTest.API.Migrations.NewDatabase.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendTest.API.Migrations.NewDatabase.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BackendTest.API.Migrations.NewDatabase.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EmailRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EmailRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
    </members>
</doc>
